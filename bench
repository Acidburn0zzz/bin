#!/bin/bash

# location of files on physical disk where below files are stored
# and where results will be written
test_path="/mnt/data/bench"

# where to do the test - using tmpfs is HIGHLY recommended
ramdisk="/scratch/bench"

# name of the dir containing the preconfigured linux source
source="linux-4.8"

# name of video for test encode
# can be downloaded with youtube-dl, here we get just the 720p video
# youtube-dl -f 136 https://www.youtube.com/watch?v=vELfuiUpKM0
video="video.mp4"

# number of times to run echo benchmark
limit="6"

# number of make flags which should be physical core + hyperthreaded core + 1
MAKEFLAGS="9"

calc() {
	diff=$(echo "scale=6; $finish - $start" | bc)
	[[ "$BENCH" != "test" ]] && {
	simpdiff=$(echo "scale=2; $finish - $start" | bc)
	runsleft=$(echo "scale=2; $limit-$x"| bc)
	secleft=$(echo "scale=2; $runsleft*$diff"|bc)
	minleft=$(echo "scale=2; $runsleft*$diff/60"|bc)
	eta=$(date -d "($date) $secleft sec" +%r)
	echo "$x,$RUNDATE,$HOSTNAME,$MAKEFLAGS,$(uname -r),$diff,$BENCH" >> $test_path/results.csv
}

# store result in an array to do some statistics on the shell
[[ $(( x - 1 )) -eq 0 ]] && unset Arr
Arr["$(( x - 1 ))"]="$diff"
mean=$(echo ${Arr[@]} | awk '{s+=$1}END{print s/NR}' RS=" ")
sd=$(echo ${Arr[@]}|sed 's/ /\n/g' | awk '{x[NR]=$0; s+=$0; n++} END{a=s/n; for (i in x){ss += (x[i]-a)^2} sd = sqrt(ss/n); print sd}')

if [[ ${#Arr[@]} -eq 1 ]]; then
	echo "$x/$limit: $simpdiff sec ETA: $eta or about $minleft min."
else
	echo "$x/$limit: $simpdiff sec ETA: $eta or about $minleft min... mean result: $mean +/- $sd sec"
fi
}

do_test() {
	BENCH=test
	echo "Running Test..."
	x=0
	while [[ "$x" -lt "$limit" ]]; do
		x=$(( x + 1 ))
		RUNDATE=$(date "+%F %T")
		start=$(date +%s.%N)
		sleep 1s
		finish=$(date +%s.%N)
		calc
	done
}

do_make() {
	BENCH=make
	echo "Running Make..."
	[[ ! -d $ramdisk/$source ]] &&
		tar xf $test_path/$source.tar -C $ramdisk
	cd "$ramdisk/$source" || exit
	x=0
	while [[ "$x" -lt "$limit" ]]; do
		x=$(( x + 1 ))
		make clean &>/dev/null
		RUNDATE=$(date "+%F %T")
		start=$(date +%s.%N)
		make -j$MAKEFLAGS bzImage &>/dev/null
		finish=$(date +%s.%N)
		calc
	done
	rm -rf "$ramdisk/$source"
}

do_video() {
	BENCH=video
	echo "Running video..."
	cp -a "$test_path/$video" "$ramdisk"
	cd $ramdisk || exit
	x=0
	while [[ "$x" -lt "$limit" ]]; do
		x=$(( x + 1 ))
		RUNDATE=$(date "+%F %T")
		start=$(date +%s.%N)
		# 360p video for old iphones
		ffmpeg -i "$video" -vcodec libx264 -vprofile baseline -preset slow -b:v \
			250k -maxrate 250k -bufsize 500k -vf scale=-1:360 -threads 0 -acodec copy out.mp4 &>/dev/null
		finish=$(date +%s.%N)
		calc
		rm -f out.mp4
	done
	rm -f "$ramdisk/$video"
}

do_compress() {
	BENCH=compress
	echo "Running compress..."
	[[ ! -f "$ramdisk/$source.tar" ]] && cp "$test_path/$source.tar" "$ramdisk"
	cd "$ramdisk" || exit
	x=0
	while [[ "$x" -lt "$limit" ]]; do
		x=$(( x + 1 ))
		RUNDATE=$(date "+%F %T")
		start=$(date +%s.%N)
		lrzip $source.tar &>/dev/null
		finish=$(date +%s.%N)
		calc
		rm -f $ramdisk/$source.tar.lrz
	done
	rm -f "$ramdisk/$source.tar"
}

XSRUNNING=$(pidof xscreensaver)
[[ -n "$XSRUNNING" ]] && kill "$XSRUNNING"
[[ -z $(which bc) ]] && echo "Install bc to allow calculations." && exit 0
[[ -z $(which ffmpeg) ]] && echo "Install ffmpeg to allow for video benchmark." && exit 0
[[ -z $(which lrzip) ]] && echo "Install lrzip to allow for compression benchmark." && exit 0
[[ -z $(which gcc) ]] && echo "Install base-devel group to allow for make benchmark." && exit 0
[[ ! -d "$ramdisk" ]] && mkdir -p "$ramdisk"
[[ ! -f "$test_path"/results.csv ]] &&
	echo "run #,run date,hostname,makeflags,kernel,time(sec),benchmark" \
	> "$test_path/results.csv"

case "$1" in
	compress)	do_compress ;;
	make)			do_make ;;
	video)		do_video ;;
	test)			do_test ;;
	all)			do_compress ; do_make ; do_video ;;
	*)				echo "Usage: $0 {video|make|compress|test|all}" ; exit 0 ;;
esac
